import os
import uuid
import base64
import time
import requests
import urllib3
import asyncio
from flask import Flask, request
from threading import Thread
from telegram import Update, Bot, ReplyKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

TOKEN = os.getenv("TG_BOT_TOKEN")
CLIENT_ID = os.getenv("GIGACHAT_CLIENT_ID")
CLIENT_SECRET = os.getenv("GIGACHAT_CLIENT_SECRET")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")  # from Render env var

bot = Bot(token=TOKEN)
app_flask = Flask(__name__)

user_contexts = {}
user_last_active = {}
user_silence_prompts = {}
dialog_ended = set()

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –¥–æ–±—Ä—ã–π –∏ —Ç—ë–ø–ª—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞–º. "
    "–ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∫ —Ö–æ—Ä–æ—à–∏–π –¥—Ä—É–≥. "
    "–ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —á–µ–ª–æ–≤–µ–∫–∞, –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –æ–Ω –º–æ–ª—á–∏—Ç. "
    "–ü–∏—à–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –±—ã–ª–æ —Ç–µ–ø–ª–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."
)

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        ["üü¢ –ù–∞—á–∞—Ç—å", "üôè –°–ø–∞—Å–∏–±–æ"],
        ["üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"]
    ],
    resize_keyboard=True
)

def get_access_token():
    auth_string = f"{CLIENT_ID}:{CLIENT_SECRET}"
    auth_base64 = base64.b64encode(auth_string.encode()).decode()

    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
        "Authorization": f"Basic {auth_base64}",
        "RqUID": str(uuid.uuid4())
    }

    response = requests.post(
        "https://ngw.devices.sberbank.ru:9443/api/v2/oauth",
        headers=headers,
        data={"scope": "GIGACHAT_API_PERS"},
        verify=False
    )

    return response.json().get("access_token") if response.ok else None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    user_contexts[user_id] = []
    user_last_active[user_id] = time.time()
    user_silence_prompts[user_id] = 0
    dialog_ended.discard(user_id)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤.\n"
        "–¢—Ä–µ–≤–æ–≥–∞, —Å—Ç—Ä–∞—Ö, —É—Å—Ç–∞–ª–æ—Å—Ç—å ‚Äî —è —Ä—è–¥–æ–º üí¨\n\n"
        "üü¢ –ù–∞—á–∞—Ç—å ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä\n"
        "üôè –°–ø–∞—Å–∏–±–æ ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å\n"
        "üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å\n\n"
        "üëá –ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å¬ª", reply_markup=keyboard
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_last_active[update.effective_chat.id] = time.time()
    await update.message.reply_text(
        "‚ÑπÔ∏è –Ø –ø–æ–¥–¥–µ—Ä–∂—É —Ç–µ–±—è, –∫–æ–≥–¥–∞ —Ç—Ä—É–¥–Ω–æ üíõ\n\n"
        "üü¢ –ù–∞—á–∞—Ç—å ‚Äî —Å –Ω–∞—á–∞–ª–∞\n"
        "üôè –°–ø–∞—Å–∏–±–æ ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –±–µ—Å–µ–¥—É\n"
        "üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å\n\n"
        "–ü–∏—à–∏, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤", reply_markup=keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    text = update.message.text.strip()
    user_last_active[user_id] = time.time()
    user_silence_prompts[user_id] = 0
    dialog_ended.discard(user_id)

    user_contexts.setdefault(user_id, [])

    if text == "üü¢ –ù–∞—á–∞—Ç—å":
        user_contexts[user_id] = []
        await update.message.reply_text(
            "üìù –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ.\n\n"
            "‚Ä¢ —Ç—Ä–µ–≤–æ–≥–∞ –ø–µ—Ä–µ–¥ —Å–¥–µ–ª–∫–æ–π\n"
            "‚Ä¢ —á—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã –ø–æ—Å–ª–µ –ø–æ—Ç–µ—Ä—å\n"
            "‚Ä¢ —Å—Ç—Ä–∞—Ö —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å\n"
            "‚Ä¢ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ\n\n"
            "–ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ ‚Äî —è –∑–¥–µ—Å—å üíõ"
        )
        return

    if text == "üôè –°–ø–∞—Å–∏–±–æ":
        dialog_ended.add(user_id)
        await update.message.reply_text(
            "‚ú® –†–∞–¥ –±—ã–ª –±—ã—Ç—å —Ä—è–¥–æ–º. –¢—ã –Ω–µ –æ–¥–∏–Ω.\n"
            "–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏ üí¨"
        )
        return

    if text == "üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        await continue_dialog(user_id, update)
        return

    await continue_conversation(user_id, text, update)

async def continue_conversation(user_id, user_text, update):
    access_token = get_access_token()
    if not access_token:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat.")
        return

    context_list = user_contexts[user_id]
    if not context_list:
        context_list.append({"role": "system", "content": SYSTEM_PROMPT})
    context_list.append({"role": "user", "content": user_text})

    response = requests.post(
        "https://gigachat.devices.sberbank.ru/api/v1/chat/completions",
        headers={
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        },
        json={"model": "GigaChat", "messages": context_list},
        verify=False
    )

    if response.ok:
        reply = response.json()["choices"][0]["message"]["content"]
        for symbol in ["*", "_", "`", "#"]:
            reply = reply.replace(symbol, "")
        context_list.append({"role": "assistant", "content": reply})
    else:
        reply = f"‚ö†Ô∏è GigaChat –æ—à–∏–±–∫–∞: {response.status_code}"

    await update.message.reply_text(reply)

async def continue_dialog(user_id, update):
    context_list = user_contexts[user_id]
    if not context_list:
        await update.message.reply_text("–ú—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏. –ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å¬ª üòä")
        return

    prompt = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å. –ü–æ–¥–¥–µ—Ä–∂–∏ –¥–æ–±—Ä—ã–º –≤–æ–ø—Ä–æ—Å–æ–º."
    context_list.append({"role": "user", "content": prompt})
    await continue_conversation(user_id, prompt, update)

async def monitor_silence(app: Application):
    while True:
        now = time.time()
        for user_id, last_active in list(user_last_active.items()):
            if user_id in dialog_ended:
                continue

            if now - last_active > 120:
                count = user_silence_prompts.get(user_id, 0)
                if count >= 3:
                    continue

                user_last_active[user_id] = now
                user_silence_prompts[user_id] = count + 1
                try:
                    prompt = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–ª—á–∏—Ç. –°–ø—Ä–æ—Å–∏ –¥–æ–±—Ä—ã–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ—Å–µ–¥—É."
                    user_contexts[user_id].append({"role": "user", "content": prompt})
                    await bot.send_message(chat_id=user_id, text="ü§î –í—Å—ë –ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ? –Ø —Ä—è–¥–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å üí¨")
                except Exception as e:
                    print("‚ö†Ô∏è –ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∞:", e)
        await asyncio.sleep(30)

@app_flask.route(f"/webhook/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    asyncio.run(application.process_update(update))
    return "OK", 200

@app_flask.route("/")
def index():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

async def post_init(app: Application):
    await bot.set_webhook(f"{WEBHOOK_URL}/webhook/{TOKEN}")
    app.create_task(monitor_silence(app))

def run_flask():
    app_flask.run(host="0.0.0.0", port=10000)

if __name__ == "__main__":
    application = ApplicationBuilder().token(TOKEN).post_init(post_init).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    Thread(target=run_flask).start()
