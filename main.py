import os
import uuid
import base64
import time
import requests
import urllib3
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    MessageHandler, CommandHandler, filters,
    Application
)
import asyncio
import signal
import sys
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

TG_BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
CLIENT_ID = os.getenv("GIGACHAT_CLIENT_ID")
CLIENT_SECRET = os.getenv("GIGACHAT_CLIENT_SECRET")

user_contexts = {}
user_last_active = {}
user_silence_prompts = {}
dialog_ended = set()

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –¥–æ–±—Ä—ã–π –∏ —Ç—ë–ø–ª—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞–º. "
    "–ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∫ —Ö–æ—Ä–æ—à–∏–π –¥—Ä—É–≥. "
    "–ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —á–µ–ª–æ–≤–µ–∫–∞, –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –æ–Ω –º–æ–ª—á–∏—Ç. "
    "–ü–∏—à–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –±—ã–ª–æ —Ç–µ–ø–ª–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."
)

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        ["üü¢ –ù–∞—á–∞—Ç—å", "üôè –°–ø–∞—Å–∏–±–æ"],
        ["üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"]
    ],
    resize_keyboard=True
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–¥–∞—á
monitoring_task = None
shutdown_event = asyncio.Event()

class HealthHandler(BaseHTTPRequestHandler):
    """HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è health check"""
    
    def do_GET(self):
        if self.path == '/health' or self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            response_data = {
                "status": "ok",
                "service": "telegram-bot",
                "active_users": len(user_contexts),
                "timestamp": int(time.time())
            }
            
            self.wfile.write(str(response_data).encode())
        else:
            self.send_response(404)
            self.end_headers()
            self.wfile.write(b'Not Found')
    
    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞ —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å
        pass

def start_health_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health check"""
    port = int(os.getenv('PORT', 8000))
    try:
        server = HTTPServer(('0.0.0.0', port), HealthHandler)
        print(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        server.serve_forever()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def get_access_token():
    auth_string = f"{CLIENT_ID}:{CLIENT_SECRET}"
    auth_base64 = base64.b64encode(auth_string.encode()).decode()

    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
        "Authorization": f"Basic {auth_base64}",
        "RqUID": str(uuid.uuid4())
    }

    try:
        response = requests.post(
            "https://ngw.devices.sberbank.ru:9443/api/v2/oauth",
            headers=headers,
            data={"scope": "GIGACHAT_API_PERS"},
            verify=False,
            timeout=10
        )

        if response.status_code == 200:
            return response.json().get("access_token")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", response.status_code, response.text)
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat: {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    user_contexts[user_id] = []
    user_last_active[user_id] = time.time()
    user_silence_prompts[user_id] = 0
    if user_id in dialog_ended:
        dialog_ended.remove(user_id)
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤.  \n"
        "–ë—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ... —Ç—Ä–µ–≤–æ–≥–∞, —Å—Ç—Ä–∞—Ö, –≤—ã–≥–æ—Ä–∞–Ω–∏–µ.  \n"
        "–Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å üí¨\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "üü¢ –ù–∞—á–∞—Ç—å ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n"
        "üôè –°–ø–∞—Å–∏–±–æ ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –±–µ—Å–µ–¥—É\n"
        "üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å, —è —Å–∞–º –ø–æ–¥—Å–∫–∞–∂—É –≤–æ–ø—Ä–æ—Å\n\n"
        "üëá –ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å¬ª, –∏ —è –∑–∞–¥–∞–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å"
    )
    await update.message.reply_text(text, reply_markup=keyboard)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_last_active[update.message.chat_id] = time.time()
    text = (
        "‚ÑπÔ∏è –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è, –∫–æ–≥–¥–∞ —Ç—Ä—É–¥–Ω–æ.\n\n"
        "–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "üü¢ –ù–∞—á–∞—Ç—å ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä (–≤—Å—ë —Å–Ω–∞—á–∞–ª–∞)\n"
        "üôè –°–ø–∞—Å–∏–±–æ ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –±–µ—Å–µ–¥—É, –Ω–æ —è –≤—Å—ë –∑–∞–ø–æ–º–Ω—é\n"
        "üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å ‚Äî —è —Å–∞–º –∑–∞–¥–∞–º –≤–æ–ø—Ä–æ—Å\n\n"
        "–ü–∏—à–∏, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤. –Ø —Ä—è–¥–æ–º üíõ"
    )
    await update.message.reply_text(text, reply_markup=keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    text = update.message.text.strip()
    user_last_active[user_id] = time.time()
    user_silence_prompts[user_id] = 0
    if user_id in dialog_ended:
        dialog_ended.remove(user_id)

    if user_id not in user_contexts:
        user_contexts[user_id] = []

    if text == "üü¢ –ù–∞—á–∞—Ç—å":
        user_contexts[user_id] = []
        await update.message.reply_text(
            "üìù –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –Ω–∞ –¥—É—à–µ.\n\n"
            "–ú–æ–∂–µ—à—å –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç:\n"
            "‚Ä¢ —Ç—Ä–µ–≤–æ–≥–∞ –ø–µ—Ä–µ–¥ —Å–¥–µ–ª–∫–æ–π\n"
            "‚Ä¢ —á—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã –ø–æ—Å–ª–µ –ø–æ—Ç–µ—Ä—å\n"
            "‚Ä¢ —Å—Ç—Ä–∞—Ö —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å\n"
            "‚Ä¢ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ –∏–ª–∏ —É—Å—Ç–∞–ª–æ—Å—Ç—å\n\n"
            "–ü–∏—à–∏ –∫–∞–∫ —á—É–≤—Å—Ç–≤—É–µ—à—å ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è üíõ"
        )
        return

    elif text == "üôè –°–ø–∞—Å–∏–±–æ":
        dialog_ended.add(user_id)
        await update.message.reply_text(
            "‚ú® –†–∞–¥ –±—ã–ª –±—ã—Ç—å —Ä—è–¥–æ–º. –ü–æ–º–Ω–∏ ‚Äî —Ç—ã –Ω–µ –æ–¥–∏–Ω.\n"
            "–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏. –Ø —Ä—è–¥–æ–º üí¨"
        )
        return

    elif text == "üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        return await continue_dialog(user_id, update)

    await continue_conversation(user_id, text, update)

async def continue_conversation(user_id, user_text, update):
    access_token = get_access_token()
    if not access_token:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ GigaChat.")
        return

    context_list = user_contexts[user_id]
    if not context_list:
        context_list.append({"role": "system", "content": SYSTEM_PROMPT})
    context_list.append({"role": "user", "content": user_text})

    try:
        response = requests.post(
            "https://gigachat.devices.sberbank.ru/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {access_token}",
                "Content-Type": "application/json"
            },
            json={"model": "GigaChat", "messages": context_list},
            verify=False,
            timeout=30
        )

        if response.ok:
            reply = response.json()["choices"][0]["message"]["content"]
            for symbol in ["*", "_", "`", "#"]:
                reply = reply.replace(symbol, "")
            context_list.append({"role": "assistant", "content": reply})
        else:
            reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GigaChat: {response.status_code}"
    except Exception as e:
        reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"

    await update.message.reply_text(reply)

async def continue_dialog(user_id, update):
    context_list = user_contexts[user_id]
    if not context_list:
        await update.message.reply_text("–ü–æ–∫–∞ —á—Ç–æ —É –Ω–∞—Å –Ω–µ –±—ã–ª–æ –±–µ—Å–µ–¥—ã. –ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üòä")
        return

    prompt = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å. –ü–æ–º–æ–≥–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä, –∑–∞–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π, –¥–æ–±—Ä—ã–π –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ."
    context_list.append({"role": "user", "content": prompt})
    await continue_conversation(user_id, prompt, update)

async def monitor_silence(app: Application):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–ª—á–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üîÑ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–ª—á–∞–Ω–∏—è")
    try:
        while not shutdown_event.is_set():
            now = time.time()
            for user_id, last_active in list(user_last_active.items()):
                if user_id in dialog_ended:
                    continue

                if now - last_active > 120:  # 2 –º–∏–Ω—É—Ç—ã –º–æ–ª—á–∞–Ω–∏—è
                    count = user_silence_prompts.get(user_id, 0)
                    if count >= 3:
                        continue  # –±–æ–ª—å—à–µ –Ω–µ –ø–∏—Å–∞—Ç—å

                    user_last_active[user_id] = now
                    user_silence_prompts[user_id] = count + 1
                    
                    try:
                        chat_context = user_contexts.get(user_id, [])
                        if not chat_context:
                            continue

                        prompt = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–ª—á–∏—Ç. –°–ø—Ä–æ—Å–∏—Ç—å –¥–æ–±—Ä—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã gently –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä."
                        chat_context.append({"role": "user", "content": prompt})

                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                        class DummyMessage:
                            def __init__(self, chat_id, bot):
                                self.chat_id = chat_id
                                self._bot = bot

                            async def reply_text(self, msg, **kwargs):
                                await self._bot.send_message(self.chat_id, msg, **kwargs)

                        dummy_update = type('dummy', (), {})()
                        dummy_update.message = DummyMessage(user_id, app.bot)

                        await continue_conversation(user_id, prompt, dummy_update)

                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                await asyncio.wait_for(shutdown_event.wait(), timeout=30.0)
                break  # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            except asyncio.TimeoutError:
                continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞
                
    except asyncio.CancelledError:
        print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–ª—á–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –º–æ–ª—á–∞–Ω–∏—è: {e}")
    finally:
        print("üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–ª—á–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")

async def post_init(application: Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global monitoring_task
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    monitoring_task = asyncio.create_task(monitor_silence(application))

async def post_shutdown(application: Application):
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    global monitoring_task
    print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    shutdown_event.set()
    
    if monitoring_task and not monitoring_task.done():
        monitoring_task.cancel()
        try:
            await monitoring_task
        except asyncio.CancelledError:
            pass

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    shutdown_event.set()

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not TG_BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        sys.exit(1)
    
    if not CLIENT_ID or not CLIENT_SECRET:
        print("‚ùå –û—à–∏–±–∫–∞: GIGACHAT_CLIENT_ID –∏–ª–∏ GIGACHAT_CLIENT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    print("üåê –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞...")
    health_thread = threading.Thread(target=start_health_server, daemon=True)
    health_thread.start()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = (ApplicationBuilder()
           .token(TG_BOT_TOKEN)
           .post_init(post_init)
           .post_shutdown(post_shutdown)
           .build())

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        app.run_polling(
            drop_pending_updates=True,
            close_loop=False
        )
    except KeyboardInterrupt:
        print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("üèÅ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == "__main__":
    main()
